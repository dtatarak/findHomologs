FindHomologs <- function(input_organism, output_organism, input_genes) {

`%notin%` <- Negate(`%in%`)
gene_list <- as.character(input_genes)

###these are the organisms the function currently supports###
useable_names <- c("fly","celegans","zebrafish","chicken", "human", "mouse", "rabbit", "rat")
useable_datasets <- c("dmelanogaster_gene_ensembl","celegans_gene_ensembl","drerio_gene_ensembl", "ggallus_gene_ensembl", "hsapiens_gene_ensembl", "mmusculus_gene_ensembl", "ocuniculus_gene_ensembl", "rnorvegicus_gene_ensembl")

###check to make sure the organisms requested are in the the supported list###
if (input_organism %notin% useable_names){
  stop(paste0(input_organism, " is not recognized as an input organism. Please use from the following list: fly, celegans, zebrafish, chicken, human, mouse, rabbit, rat"))
}
if (output_organism %notin% useable_names){
  stop(paste0(output_organism, " is not recognized as an output organism. Please use from the following list: fly, celegans, zebrafish, chicken, human, mouse, rabbit, rat"))
}

###make a data frame that defines the data set name for each of the useable organisms###
dataset_list <- data.frame(dataset = useable_datasets, common_name = useable_names)
rownames(dataset_list) <- dataset_list$common_name


###load in the marts for the requested organisms###
input_mart <- useMart("ensembl", 
                     dataset = as.character(dataset_list[input_organism,1]))
output_mart <- useMart("ensembl", 
                      dataset = as.character(dataset_list[output_organism,1]))


###perform conversions###
conversions <- getLDS(attributes = c("external_gene_name"),
                   filters = "external_gene_name",
                   values = gene_list,
                   mart = input_mart,
                   attributesL = c("external_gene_name"),
                   martL = output_mart, 
                   uniqueRows=T)

colnames(conversions) <- c(input_organism, output_organism)

missing_genes <- input_genes[input_genes %notin% conversions[,1]] 
if (length(missing_genes) > 0){
 warning(paste0("The following genes were not found: ", paste(missing_genes, collapse = ", ")))
 }

return(conversions)

}

